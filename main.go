package main

import (
	"bufio"
	"context"
	"fmt"
	"github.com/gdamore/tcell/v2"
	"github.com/joho/godotenv"
	"math/rand"
	"os"
	"os/signal"
	"soundcloud_player/player"
	"soundcloud_player/soundcloud"
	"soundcloud_player/ui"
	"strings"
	"syscall"
	"time"
)

func main() {
	ui.PrintHeader()

	if err := godotenv.Load(); err != nil {
		ui.PrintError("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env —Ñ–∞–π–ª–∞")
		return
	}

	clientID := os.Getenv("SOUNDCLOUD_CLIENT_ID")
	if clientID == "" {
		ui.PrintError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è SOUNDCLOUD_CLIENT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ .env")
		return
	}

	reader := bufio.NewReader(os.Stdin)
	fmt.Print("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å (–∏–ª–∏ Enter –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ): ")
	query, _ := reader.ReadString('\n')
	query = strings.TrimSpace(query)

	if query == "" {
		rand.Seed(time.Now().UnixNano())
		keywords := []string{"lofi", "hiphop", "ambient", "indie", "funk", "synthwave"}
		query = keywords[rand.Intn(len(keywords))]
		fmt.Println("üé≤ –°–ª—É—á–∞–π–Ω—ã–π –∑–∞–ø—Ä–æ—Å:", query)
	}

	tracks, err := soundcloud.GetTracks(query, clientID)
	if err != nil || len(tracks) == 0 {
		ui.PrintError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–∫–∏")
		return
	}

	ui.PrintTracks(tracks)
	fmt.Print("\n–í—ã–±–µ—Ä–∏ —Ç—Ä–µ–∫ (–Ω–æ–º–µ—Ä –∏–ª–∏ Enter –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ): ")
	choiceStr, _ := reader.ReadString('\n')
	choiceStr = strings.TrimSpace(choiceStr)

	var idx int
	if choiceStr == "" {
		rand.Seed(time.Now().UnixNano())
		idx = rand.Intn(len(tracks))
	} else {
		fmt.Sscanf(choiceStr, "%d", &idx)
		if idx < 1 || idx > len(tracks) {
			ui.PrintError("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç—Ä–µ–∫–∞")
			return
		}
		idx--
	}

	screen, err := tcell.NewScreen()
	if err != nil {
		ui.PrintError(fmt.Sprintf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫—Ä–∞–Ω–∞: %v", err))
		return
	}
	if err := screen.Init(); err != nil {
		ui.PrintError(fmt.Sprintf("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞: %v", err))
		return
	}
	defer screen.Fini()

	sigs := make(chan os.Signal, 1)
	signal.Notify(sigs, syscall.SIGINT, syscall.SIGTERM)
	go func() {
		<-sigs
		screen.Fini()
		os.Exit(0)
	}()

	keyChan := make(chan player.KeyEvent)
	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	player.StartKeyboardListener(ctx, screen, keyChan)
	player.PlayWithControls(tracks, idx, keyChan, screen)
}
